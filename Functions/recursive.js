// for inifity time repeat.

function getRecursive(nr) {
    console.log(nr);
    getRecursive(--nr);
}
getRecursive(5); 

/* Output
-10294
-10295
-10296
-10297
-10298
-10299
-10300
-10301
-10302
-10303
-10304
-10305
-10306
-10307
-10308
-10309
-10310
-10311
-10312
-10313
-10314
-10315
-10316
-10317
-10318
-10319
-10320
-10321
-10322
-10323
-10324
-10325
-10326
-10327
-10328
-10329
-10330
-10331
-10332
-10333
-10334
-10335
-10336
-10337
-10338
-10339
-10340
-10341
-10342
-10343
-10344
-10345
-10346
-10347
-10348
-10349
-10350
-10351
-10352
-10353
-10354
-10355
-10356
-10357
-10358
-10359
-10360
-10361
-10362
-10363
-10364
-10365
-10366
-10367
-10368
-10369
-10370
-10371
-10372
-10373
-10374
-10375
-10376
-10377
-10378
-10379
-10380
-10381
-10382
-10383
-10384
-10385
-10386
-10387
-10388
-10389
-10390
-10391
-10392
-10393
-10394
-10395
-10396
-10397
-10398
-10399
-10400
-10401
-10402
-10403
-10404
-10405
-10406
-10407
-10408
-10409
-10410
-10411
-10412
-10413
-10414
-10415
-10416
-10417
-10418
-10419
-10420
-10421
-10422
-10423
-10424
-10425
-10426
-10427
-10428
-10429
-10430
-10431
-10432
-10433
-10434
-10435
-10436
-10437
-10438
-10439
-10440
-10441
-10442
-10443
-10444
-10445
-10446
-10447
-10448
-10449
-10450
-10451
-10452
-10453
-10454
-10455
-10456
-10457
-10458
-10459
-10460
-10461
-10462
-10463
-10464
-10465
-10466
-10467
-10468
-10469
-10470
-10471
-10472
-10473
-10474
-10475
-10476
-10477
-10478
-10479
-10480
-10481
-10482
-10483
-10484
-10485
-10486
-10487
-10488
-10489
-10490
-10491
-10492
-10493
-10494
-10495
-10496
-10497
-10498
-10499
-10500
-10501
-10502
-10503
-10504
-10505
-10506
-10507
-10508
-10509
-10510
-10511
-10512
-10513
-10514
-10515
-10516
-10517
-10518
-10519
-10520
-10521
-10522
-10523
-10524
-10525
-10526
-10527
-10528
-10529
-10530
-10531
-10532
-10533
-10534
-10535
-10536
-10537
-10538
-10539
-10540
-10541
-10542
-10543
-10544
-10545
-10546
-10547
-10548
-10549
-10550
-10551
-10552
-10553
-10554
-10555
-10556
-10557
-10558
-10559
-10560
-10561
-10562
-10563
-10564
-10565
-10566
-10567
-10568
-10569
-10570
-10571
-10572
-10573
-10574
-10575
-10576
-10577
-10578
-10579
-10580
-10581
-10582
-10583
-10584
-10585
-10586
-10587
-10588
-10589
-10590
-10591
-10592
-10593
-10594
-10595
-10596
-10597
-10598
-10599
-10600
-10601
-10602
-10603
-10604
-10605
-10606
-10607
-10608
-10609
-10610
-10611
-10612
-10613
-10614
-10615
-10616
-10617
-10618
-10619
-10620
-10621
-10622
-10623
-10624
-10625
-10626
-10627
-10628
-10629
-10630
-10631
-10632
-10633
-10634
-10635
-10636
-10637
-10638
-10639
-10640
-10641
-10642
-10643
-10644
-10645
-10646
-10647
-10648
-10649
-10650
-10651
-10652
-10653
-10654
-10655
-10656
-10657
-10658
-10659
-10660
-10661
-10662
-10663
-10664
-10665
-10666
-10667
-10668
-10669
-10670
-10671
-10672
-10673
-10674
-10675
-10676
-10677
-10678
-10679
-10680
-10681
-10682
-10683
-10684
-10685
-10686
-10687
-10688
-10689
-10690
-10691
-10692
-10693
-10694
-10695
-10696
-10697
-10698
-10699
-10700
-10701
-10702
-10703
-10704
-10705
-10706
-10707
-10708
-10709
-10710
-10711
-10712
-10713
-10714
-10715
-10716
-10717
-10718
-10719
-10720
-10721
-10722
-10723
-10724
-10725
-10726
-10727
-10728
-10729
-10730
-10731
-10732
-10733
-10734
-10735
-10736
-10737
-10738
-10739
-10740
-10741
-10742
-10743
-10744
-10745
-10746
-10747
-10748
-10749
-10750
-10751
-10752
-10753
-10754
-10755
-10756
-10757
-10758
-10759
-10760
-10761
-10762
-10763
-10764
-10765
-10766
-10767
-10768
-10769
-10770
-10771
-10772
-10773
-10774
-10775
-10776
-10777
-10778
-10779
-10780
-10781
-10782
-10783
-10784
-10785
-10786
-10787
-10788
-10789
-10790
-10791
-10792
-10793
-10794
-10795
-10796
-10797
-10798
-10799
-10800
-10801
-10802
-10803
-10804
-10805
-10806
-10807
-10808
-10809
-10810
-10811
-10812
-10813
-10814
-10815
-10816
-10817
-10818
-10819
-10820
-10821
-10822
-10823
-10824
-10825
-10826
-10827
-10828
-10829
-10830
-10831
-10832
-10833
-10834
-10835
-10836
-10837
-10838
-10839
-10840
-10841
-10842
-10843
-10844
-10845
-10846
-10847
-10848
-10849
-10850
-10851
-10852
-10853
-10854
-10855
-10856
-10857
-10858
-10859
-10860
-10861
-10862
-10863
-10864
-10865
-10866
-10867
-10868
-10869
-10870
-10871
-10872
-10873
-10874
-10875
-10876
-10877
-10878
-10879
-10880
-10881
-10882
-10883
-10884
-10885
-10886
-10887
-10888
-10889
-10890
-10891
-10892
-10893
-10894
-10895
-10896
-10897
-10898
-10899
-10900
-10901
-10902
-10903
-10904
-10905
-10906
-10907
-10908
-10909
-10910
-10911
-10912
-10913
-10914
-10915
-10916
-10917
-10918
-10919
-10920
-10921
-10922
-10923
-10924
-10925
-10926
-10927
-10928
-10929
-10930
-10931
-10932
-10933
-10934
-10935
-10936
-10937
-10938
-10939
-10940
-10941
-10942
-10943
-10944
-10945
-10946
-10947
-10948
-10949
-10950
-10951
-10952
-10953
-10954
-10955
-10956
-10957
-10958
-10959
-10960
-10961
-10962
-10963
-10964
-10965
-10966
-10967
-10968
-10969
-10970
-10971
-10972
-10973
-10974
-10975
-10976
-10977
-10978
-10979
-10980
-10981
-10982
-10983
-10984
-10985
-10986
-10987
-10988
-10989
-10990
-10991
-10992
-10993
-10994
-10995
-10996
-10997
-10998
-10999
-11000
-11001
-11002
-11003
-11004
-11005
-11006
-11007
-11008
-11009
-11010
-11011
-11012
-11013
-11014
-11015
-11016
-11017
-11018
-11019
-11020
-11021
-11022
-11023
-11024
-11025
-11026
-11027
-11028
-11029
-11030
-11031
-11032
-11033
-11034
-11035
-11036
-11037
-11038
-11039
-11040
-11041
-11042
-11043
-11044
-11045
-11046
-11047
-11048
-11049
-11050
-11051
-11052
-11053
-11054
-11055
-11056
-11057
-11058
-11059
-11060
-11061
-11062
-11063
-11064
-11065
-11066
-11067
-11068
-11069
-11070
-11071
-11072
-11073
-11074
-11075
-11076
-11077
-11078
-11079
-11080
-11081
-11082
-11083
-11084
-11085
-11086
-11087
-11088
-11089
-11090
-11091
-11092
-11093
-11094
-11095
-11096
-11097
-11098
-11099
-11100
-11101
-11102
-11103
-11104
-11105
-11106
-11107
-11108
-11109
-11110
-11111
-11112
-11113
-11114
-11115
-11116
-11117
-11118
-11119
-11120
-11121
-11122
-11123
-11124
-11125
-11126
-11127
-11128
-11129
-11130
-11131
-11132
-11133
-11134
-11135
-11136
-11137
-11138
-11139
-11140
-11141
-11142
-11143
-11144
-11145
-11146
-11147
-11148
-11149
-11150
-11151
-11152
-11153
-11154
-11155
-11156
-11157
-11158
-11159
-11160
-11161
-11162
-11163
-11164
-11165
-11166
-11167
-11168
-11169
-11170
-11171
-11172
-11173
-11174
-11175
-11176
-11177
-11178
-11179
-11180
-11181
-11182
-11183
-11184
-11185
-11186
-11187
-11188
-11189
-11190
-11191
-11192
-11193
-11194
-11195
-11196
-11197
-11198
-11199
-11200
-11201
-11202
-11203
-11204
-11205
-11206
-11207
-11208
-11209
-11210
-11211
-11212
-11213
-11214
-11215
-11216
-11217
-11218
-11219
-11220
-11221
-11222
-11223
-11224
-11225
-11226
-11227
-11228
-11229
-11230
-11231
-11232
-11233
-11234
-11235
-11236
-11237
-11238
-11239
-11240
-11241
-11242
-11243
-11244
-11245
-11246
-11247
-11248
-11249
-11250
-11251
-11252
-11253
-11254
-11255
-11256
-11257
-11258
-11259
-11260
-11261
-11262
-11263
-11264
-11265
-11266
-11267
-11268
-11269
-11270
-11271
-11272
-11273
-11274
-11275
-11276
-11277
-11278
-11279
-11280
-11281
-11282
-11283
-11284
-11285
-11286
-11287
node:internal/util/inspect:766
function formatValue(ctx, value, recurseTimes, typedArray) {
                    ^

RangeError: Maximum call stack size exceeded */


//  to stop recursive function

 function getRecursive(nr) {
    console.log(nr);
    if (nr > 0)
    getRecursive(--nr);
}
getRecursive(5);

/* Output
5
4
3
2
1
0
*/

// step by step recursive function

function getRecursive(nr) {
    console.log ("Started function iteration ", nr);
    if (nr > 0) {
    getRecursive(--nr);
    } else {
        console.log("Recursion completed");
    }
    console.log("Function ended: ", nr);
}
getRecursive(5);

/* Output
Started function iteration  5
Started function iteration  4
Started function iteration  3
Started function iteration  2
Started function iteration  1
Started function iteration  0
Recursion completed
Function ended:  0
Function ended:  0
Function ended:  1
Function ended:  2
Function ended:  3
Function ended:  4
*/

 function logRecursive(nr) {
    console.log("Started function:", nr);
    if (nr > 0) {
    logRecursive(nr - 1);
    } else {
    console.log("done with recursion");
    }
    console.log("Ended function:", nr);
   }
   logRecursive(3);

/* Ouput
Started function: 3
Started function: 2
Started function: 1
Started function: 0
done with recursion
Ended function: 0
Ended function: 1
Ended function: 2
Ended function: 3
*/